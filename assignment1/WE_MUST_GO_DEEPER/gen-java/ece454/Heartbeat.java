/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ece454;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-6-5")
public class Heartbeat implements org.apache.thrift.TBase<Heartbeat, Heartbeat._Fields>, java.io.Serializable, Cloneable, Comparable<Heartbeat> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Heartbeat");

  private static final org.apache.thrift.protocol.TField HOSTNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("hostname", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NUMBER_OF_CORES_FIELD_DESC = new org.apache.thrift.protocol.TField("numberOfCores", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField SERVICE_PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("servicePort", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField MANAGEMENT_PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("managementPort", org.apache.thrift.protocol.TType.I32, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new HeartbeatStandardSchemeFactory());
    schemes.put(TupleScheme.class, new HeartbeatTupleSchemeFactory());
  }

  public String hostname; // required
  public int numberOfCores; // required
  public int servicePort; // required
  public int managementPort; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    HOSTNAME((short)1, "hostname"),
    NUMBER_OF_CORES((short)2, "numberOfCores"),
    SERVICE_PORT((short)3, "servicePort"),
    MANAGEMENT_PORT((short)4, "managementPort");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // HOSTNAME
          return HOSTNAME;
        case 2: // NUMBER_OF_CORES
          return NUMBER_OF_CORES;
        case 3: // SERVICE_PORT
          return SERVICE_PORT;
        case 4: // MANAGEMENT_PORT
          return MANAGEMENT_PORT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NUMBEROFCORES_ISSET_ID = 0;
  private static final int __SERVICEPORT_ISSET_ID = 1;
  private static final int __MANAGEMENTPORT_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.HOSTNAME, new org.apache.thrift.meta_data.FieldMetaData("hostname", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NUMBER_OF_CORES, new org.apache.thrift.meta_data.FieldMetaData("numberOfCores", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SERVICE_PORT, new org.apache.thrift.meta_data.FieldMetaData("servicePort", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MANAGEMENT_PORT, new org.apache.thrift.meta_data.FieldMetaData("managementPort", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Heartbeat.class, metaDataMap);
  }

  public Heartbeat() {
  }

  public Heartbeat(
    String hostname,
    int numberOfCores,
    int servicePort,
    int managementPort)
  {
    this();
    this.hostname = hostname;
    this.numberOfCores = numberOfCores;
    setNumberOfCoresIsSet(true);
    this.servicePort = servicePort;
    setServicePortIsSet(true);
    this.managementPort = managementPort;
    setManagementPortIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Heartbeat(Heartbeat other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetHostname()) {
      this.hostname = other.hostname;
    }
    this.numberOfCores = other.numberOfCores;
    this.servicePort = other.servicePort;
    this.managementPort = other.managementPort;
  }

  public Heartbeat deepCopy() {
    return new Heartbeat(this);
  }

  @Override
  public void clear() {
    this.hostname = null;
    setNumberOfCoresIsSet(false);
    this.numberOfCores = 0;
    setServicePortIsSet(false);
    this.servicePort = 0;
    setManagementPortIsSet(false);
    this.managementPort = 0;
  }

  public String getHostname() {
    return this.hostname;
  }

  public Heartbeat setHostname(String hostname) {
    this.hostname = hostname;
    return this;
  }

  public void unsetHostname() {
    this.hostname = null;
  }

  /** Returns true if field hostname is set (has been assigned a value) and false otherwise */
  public boolean isSetHostname() {
    return this.hostname != null;
  }

  public void setHostnameIsSet(boolean value) {
    if (!value) {
      this.hostname = null;
    }
  }

  public int getNumberOfCores() {
    return this.numberOfCores;
  }

  public Heartbeat setNumberOfCores(int numberOfCores) {
    this.numberOfCores = numberOfCores;
    setNumberOfCoresIsSet(true);
    return this;
  }

  public void unsetNumberOfCores() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMBEROFCORES_ISSET_ID);
  }

  /** Returns true if field numberOfCores is set (has been assigned a value) and false otherwise */
  public boolean isSetNumberOfCores() {
    return EncodingUtils.testBit(__isset_bitfield, __NUMBEROFCORES_ISSET_ID);
  }

  public void setNumberOfCoresIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMBEROFCORES_ISSET_ID, value);
  }

  public int getServicePort() {
    return this.servicePort;
  }

  public Heartbeat setServicePort(int servicePort) {
    this.servicePort = servicePort;
    setServicePortIsSet(true);
    return this;
  }

  public void unsetServicePort() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SERVICEPORT_ISSET_ID);
  }

  /** Returns true if field servicePort is set (has been assigned a value) and false otherwise */
  public boolean isSetServicePort() {
    return EncodingUtils.testBit(__isset_bitfield, __SERVICEPORT_ISSET_ID);
  }

  public void setServicePortIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SERVICEPORT_ISSET_ID, value);
  }

  public int getManagementPort() {
    return this.managementPort;
  }

  public Heartbeat setManagementPort(int managementPort) {
    this.managementPort = managementPort;
    setManagementPortIsSet(true);
    return this;
  }

  public void unsetManagementPort() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MANAGEMENTPORT_ISSET_ID);
  }

  /** Returns true if field managementPort is set (has been assigned a value) and false otherwise */
  public boolean isSetManagementPort() {
    return EncodingUtils.testBit(__isset_bitfield, __MANAGEMENTPORT_ISSET_ID);
  }

  public void setManagementPortIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MANAGEMENTPORT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case HOSTNAME:
      if (value == null) {
        unsetHostname();
      } else {
        setHostname((String)value);
      }
      break;

    case NUMBER_OF_CORES:
      if (value == null) {
        unsetNumberOfCores();
      } else {
        setNumberOfCores((Integer)value);
      }
      break;

    case SERVICE_PORT:
      if (value == null) {
        unsetServicePort();
      } else {
        setServicePort((Integer)value);
      }
      break;

    case MANAGEMENT_PORT:
      if (value == null) {
        unsetManagementPort();
      } else {
        setManagementPort((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case HOSTNAME:
      return getHostname();

    case NUMBER_OF_CORES:
      return Integer.valueOf(getNumberOfCores());

    case SERVICE_PORT:
      return Integer.valueOf(getServicePort());

    case MANAGEMENT_PORT:
      return Integer.valueOf(getManagementPort());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case HOSTNAME:
      return isSetHostname();
    case NUMBER_OF_CORES:
      return isSetNumberOfCores();
    case SERVICE_PORT:
      return isSetServicePort();
    case MANAGEMENT_PORT:
      return isSetManagementPort();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Heartbeat)
      return this.equals((Heartbeat)that);
    return false;
  }

  public boolean equals(Heartbeat that) {
    if (that == null)
      return false;

    boolean this_present_hostname = true && this.isSetHostname();
    boolean that_present_hostname = true && that.isSetHostname();
    if (this_present_hostname || that_present_hostname) {
      if (!(this_present_hostname && that_present_hostname))
        return false;
      if (!this.hostname.equals(that.hostname))
        return false;
    }

    boolean this_present_numberOfCores = true;
    boolean that_present_numberOfCores = true;
    if (this_present_numberOfCores || that_present_numberOfCores) {
      if (!(this_present_numberOfCores && that_present_numberOfCores))
        return false;
      if (this.numberOfCores != that.numberOfCores)
        return false;
    }

    boolean this_present_servicePort = true;
    boolean that_present_servicePort = true;
    if (this_present_servicePort || that_present_servicePort) {
      if (!(this_present_servicePort && that_present_servicePort))
        return false;
      if (this.servicePort != that.servicePort)
        return false;
    }

    boolean this_present_managementPort = true;
    boolean that_present_managementPort = true;
    if (this_present_managementPort || that_present_managementPort) {
      if (!(this_present_managementPort && that_present_managementPort))
        return false;
      if (this.managementPort != that.managementPort)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_hostname = true && (isSetHostname());
    list.add(present_hostname);
    if (present_hostname)
      list.add(hostname);

    boolean present_numberOfCores = true;
    list.add(present_numberOfCores);
    if (present_numberOfCores)
      list.add(numberOfCores);

    boolean present_servicePort = true;
    list.add(present_servicePort);
    if (present_servicePort)
      list.add(servicePort);

    boolean present_managementPort = true;
    list.add(present_managementPort);
    if (present_managementPort)
      list.add(managementPort);

    return list.hashCode();
  }

  @Override
  public int compareTo(Heartbeat other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetHostname()).compareTo(other.isSetHostname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHostname()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostname, other.hostname);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNumberOfCores()).compareTo(other.isSetNumberOfCores());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumberOfCores()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numberOfCores, other.numberOfCores);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetServicePort()).compareTo(other.isSetServicePort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServicePort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.servicePort, other.servicePort);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetManagementPort()).compareTo(other.isSetManagementPort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetManagementPort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.managementPort, other.managementPort);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Heartbeat(");
    boolean first = true;

    sb.append("hostname:");
    if (this.hostname == null) {
      sb.append("null");
    } else {
      sb.append(this.hostname);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("numberOfCores:");
    sb.append(this.numberOfCores);
    first = false;
    if (!first) sb.append(", ");
    sb.append("servicePort:");
    sb.append(this.servicePort);
    first = false;
    if (!first) sb.append(", ");
    sb.append("managementPort:");
    sb.append(this.managementPort);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HeartbeatStandardSchemeFactory implements SchemeFactory {
    public HeartbeatStandardScheme getScheme() {
      return new HeartbeatStandardScheme();
    }
  }

  private static class HeartbeatStandardScheme extends StandardScheme<Heartbeat> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Heartbeat struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // HOSTNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.hostname = iprot.readString();
              struct.setHostnameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NUMBER_OF_CORES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.numberOfCores = iprot.readI32();
              struct.setNumberOfCoresIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SERVICE_PORT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.servicePort = iprot.readI32();
              struct.setServicePortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MANAGEMENT_PORT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.managementPort = iprot.readI32();
              struct.setManagementPortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Heartbeat struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.hostname != null) {
        oprot.writeFieldBegin(HOSTNAME_FIELD_DESC);
        oprot.writeString(struct.hostname);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(NUMBER_OF_CORES_FIELD_DESC);
      oprot.writeI32(struct.numberOfCores);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SERVICE_PORT_FIELD_DESC);
      oprot.writeI32(struct.servicePort);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MANAGEMENT_PORT_FIELD_DESC);
      oprot.writeI32(struct.managementPort);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HeartbeatTupleSchemeFactory implements SchemeFactory {
    public HeartbeatTupleScheme getScheme() {
      return new HeartbeatTupleScheme();
    }
  }

  private static class HeartbeatTupleScheme extends TupleScheme<Heartbeat> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Heartbeat struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetHostname()) {
        optionals.set(0);
      }
      if (struct.isSetNumberOfCores()) {
        optionals.set(1);
      }
      if (struct.isSetServicePort()) {
        optionals.set(2);
      }
      if (struct.isSetManagementPort()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetHostname()) {
        oprot.writeString(struct.hostname);
      }
      if (struct.isSetNumberOfCores()) {
        oprot.writeI32(struct.numberOfCores);
      }
      if (struct.isSetServicePort()) {
        oprot.writeI32(struct.servicePort);
      }
      if (struct.isSetManagementPort()) {
        oprot.writeI32(struct.managementPort);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Heartbeat struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.hostname = iprot.readString();
        struct.setHostnameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.numberOfCores = iprot.readI32();
        struct.setNumberOfCoresIsSet(true);
      }
      if (incoming.get(2)) {
        struct.servicePort = iprot.readI32();
        struct.setServicePortIsSet(true);
      }
      if (incoming.get(3)) {
        struct.managementPort = iprot.readI32();
        struct.setManagementPortIsSet(true);
      }
    }
  }

}

