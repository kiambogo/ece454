/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ece454;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-5-26")
public class BroadcastService {

  public interface Iface {

    public void sendHealthcheck(short numberOfCores) throws org.apache.thrift.TException;

    public void sendServerUp(short portNumber, short numberOfCores) throws org.apache.thrift.TException;

    public void receiveHealthCheck(ServerHealthcheck healthCheck) throws org.apache.thrift.TException;

    public void receiveServerUp(ServerUpBroadcast broadcast) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void sendHealthcheck(short numberOfCores, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void sendServerUp(short portNumber, short numberOfCores, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void receiveHealthCheck(ServerHealthcheck healthCheck, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void receiveServerUp(ServerUpBroadcast broadcast, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void sendHealthcheck(short numberOfCores) throws org.apache.thrift.TException
    {
      send_sendHealthcheck(numberOfCores);
      recv_sendHealthcheck();
    }

    public void send_sendHealthcheck(short numberOfCores) throws org.apache.thrift.TException
    {
      sendHealthcheck_args args = new sendHealthcheck_args();
      args.setNumberOfCores(numberOfCores);
      sendBase("sendHealthcheck", args);
    }

    public void recv_sendHealthcheck() throws org.apache.thrift.TException
    {
      sendHealthcheck_result result = new sendHealthcheck_result();
      receiveBase(result, "sendHealthcheck");
      return;
    }

    public void sendServerUp(short portNumber, short numberOfCores) throws org.apache.thrift.TException
    {
      send_sendServerUp(portNumber, numberOfCores);
      recv_sendServerUp();
    }

    public void send_sendServerUp(short portNumber, short numberOfCores) throws org.apache.thrift.TException
    {
      sendServerUp_args args = new sendServerUp_args();
      args.setPortNumber(portNumber);
      args.setNumberOfCores(numberOfCores);
      sendBase("sendServerUp", args);
    }

    public void recv_sendServerUp() throws org.apache.thrift.TException
    {
      sendServerUp_result result = new sendServerUp_result();
      receiveBase(result, "sendServerUp");
      return;
    }

    public void receiveHealthCheck(ServerHealthcheck healthCheck) throws org.apache.thrift.TException
    {
      send_receiveHealthCheck(healthCheck);
      recv_receiveHealthCheck();
    }

    public void send_receiveHealthCheck(ServerHealthcheck healthCheck) throws org.apache.thrift.TException
    {
      receiveHealthCheck_args args = new receiveHealthCheck_args();
      args.setHealthCheck(healthCheck);
      sendBase("receiveHealthCheck", args);
    }

    public void recv_receiveHealthCheck() throws org.apache.thrift.TException
    {
      receiveHealthCheck_result result = new receiveHealthCheck_result();
      receiveBase(result, "receiveHealthCheck");
      return;
    }

    public void receiveServerUp(ServerUpBroadcast broadcast) throws org.apache.thrift.TException
    {
      send_receiveServerUp(broadcast);
      recv_receiveServerUp();
    }

    public void send_receiveServerUp(ServerUpBroadcast broadcast) throws org.apache.thrift.TException
    {
      receiveServerUp_args args = new receiveServerUp_args();
      args.setBroadcast(broadcast);
      sendBase("receiveServerUp", args);
    }

    public void recv_receiveServerUp() throws org.apache.thrift.TException
    {
      receiveServerUp_result result = new receiveServerUp_result();
      receiveBase(result, "receiveServerUp");
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void sendHealthcheck(short numberOfCores, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      sendHealthcheck_call method_call = new sendHealthcheck_call(numberOfCores, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sendHealthcheck_call extends org.apache.thrift.async.TAsyncMethodCall {
      private short numberOfCores;
      public sendHealthcheck_call(short numberOfCores, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.numberOfCores = numberOfCores;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sendHealthcheck", org.apache.thrift.protocol.TMessageType.CALL, 0));
        sendHealthcheck_args args = new sendHealthcheck_args();
        args.setNumberOfCores(numberOfCores);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_sendHealthcheck();
      }
    }

    public void sendServerUp(short portNumber, short numberOfCores, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      sendServerUp_call method_call = new sendServerUp_call(portNumber, numberOfCores, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sendServerUp_call extends org.apache.thrift.async.TAsyncMethodCall {
      private short portNumber;
      private short numberOfCores;
      public sendServerUp_call(short portNumber, short numberOfCores, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.portNumber = portNumber;
        this.numberOfCores = numberOfCores;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sendServerUp", org.apache.thrift.protocol.TMessageType.CALL, 0));
        sendServerUp_args args = new sendServerUp_args();
        args.setPortNumber(portNumber);
        args.setNumberOfCores(numberOfCores);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_sendServerUp();
      }
    }

    public void receiveHealthCheck(ServerHealthcheck healthCheck, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      receiveHealthCheck_call method_call = new receiveHealthCheck_call(healthCheck, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class receiveHealthCheck_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ServerHealthcheck healthCheck;
      public receiveHealthCheck_call(ServerHealthcheck healthCheck, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.healthCheck = healthCheck;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("receiveHealthCheck", org.apache.thrift.protocol.TMessageType.CALL, 0));
        receiveHealthCheck_args args = new receiveHealthCheck_args();
        args.setHealthCheck(healthCheck);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_receiveHealthCheck();
      }
    }

    public void receiveServerUp(ServerUpBroadcast broadcast, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      receiveServerUp_call method_call = new receiveServerUp_call(broadcast, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class receiveServerUp_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ServerUpBroadcast broadcast;
      public receiveServerUp_call(ServerUpBroadcast broadcast, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.broadcast = broadcast;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("receiveServerUp", org.apache.thrift.protocol.TMessageType.CALL, 0));
        receiveServerUp_args args = new receiveServerUp_args();
        args.setBroadcast(broadcast);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_receiveServerUp();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("sendHealthcheck", new sendHealthcheck());
      processMap.put("sendServerUp", new sendServerUp());
      processMap.put("receiveHealthCheck", new receiveHealthCheck());
      processMap.put("receiveServerUp", new receiveServerUp());
      return processMap;
    }

    public static class sendHealthcheck<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sendHealthcheck_args> {
      public sendHealthcheck() {
        super("sendHealthcheck");
      }

      public sendHealthcheck_args getEmptyArgsInstance() {
        return new sendHealthcheck_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public sendHealthcheck_result getResult(I iface, sendHealthcheck_args args) throws org.apache.thrift.TException {
        sendHealthcheck_result result = new sendHealthcheck_result();
        iface.sendHealthcheck(args.numberOfCores);
        return result;
      }
    }

    public static class sendServerUp<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sendServerUp_args> {
      public sendServerUp() {
        super("sendServerUp");
      }

      public sendServerUp_args getEmptyArgsInstance() {
        return new sendServerUp_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public sendServerUp_result getResult(I iface, sendServerUp_args args) throws org.apache.thrift.TException {
        sendServerUp_result result = new sendServerUp_result();
        iface.sendServerUp(args.portNumber, args.numberOfCores);
        return result;
      }
    }

    public static class receiveHealthCheck<I extends Iface> extends org.apache.thrift.ProcessFunction<I, receiveHealthCheck_args> {
      public receiveHealthCheck() {
        super("receiveHealthCheck");
      }

      public receiveHealthCheck_args getEmptyArgsInstance() {
        return new receiveHealthCheck_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public receiveHealthCheck_result getResult(I iface, receiveHealthCheck_args args) throws org.apache.thrift.TException {
        receiveHealthCheck_result result = new receiveHealthCheck_result();
        iface.receiveHealthCheck(args.healthCheck);
        return result;
      }
    }

    public static class receiveServerUp<I extends Iface> extends org.apache.thrift.ProcessFunction<I, receiveServerUp_args> {
      public receiveServerUp() {
        super("receiveServerUp");
      }

      public receiveServerUp_args getEmptyArgsInstance() {
        return new receiveServerUp_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public receiveServerUp_result getResult(I iface, receiveServerUp_args args) throws org.apache.thrift.TException {
        receiveServerUp_result result = new receiveServerUp_result();
        iface.receiveServerUp(args.broadcast);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("sendHealthcheck", new sendHealthcheck());
      processMap.put("sendServerUp", new sendServerUp());
      processMap.put("receiveHealthCheck", new receiveHealthCheck());
      processMap.put("receiveServerUp", new receiveServerUp());
      return processMap;
    }

    public static class sendHealthcheck<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sendHealthcheck_args, Void> {
      public sendHealthcheck() {
        super("sendHealthcheck");
      }

      public sendHealthcheck_args getEmptyArgsInstance() {
        return new sendHealthcheck_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            sendHealthcheck_result result = new sendHealthcheck_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            sendHealthcheck_result result = new sendHealthcheck_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, sendHealthcheck_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.sendHealthcheck(args.numberOfCores,resultHandler);
      }
    }

    public static class sendServerUp<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sendServerUp_args, Void> {
      public sendServerUp() {
        super("sendServerUp");
      }

      public sendServerUp_args getEmptyArgsInstance() {
        return new sendServerUp_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            sendServerUp_result result = new sendServerUp_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            sendServerUp_result result = new sendServerUp_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, sendServerUp_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.sendServerUp(args.portNumber, args.numberOfCores,resultHandler);
      }
    }

    public static class receiveHealthCheck<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, receiveHealthCheck_args, Void> {
      public receiveHealthCheck() {
        super("receiveHealthCheck");
      }

      public receiveHealthCheck_args getEmptyArgsInstance() {
        return new receiveHealthCheck_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            receiveHealthCheck_result result = new receiveHealthCheck_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            receiveHealthCheck_result result = new receiveHealthCheck_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, receiveHealthCheck_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.receiveHealthCheck(args.healthCheck,resultHandler);
      }
    }

    public static class receiveServerUp<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, receiveServerUp_args, Void> {
      public receiveServerUp() {
        super("receiveServerUp");
      }

      public receiveServerUp_args getEmptyArgsInstance() {
        return new receiveServerUp_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            receiveServerUp_result result = new receiveServerUp_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            receiveServerUp_result result = new receiveServerUp_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, receiveServerUp_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.receiveServerUp(args.broadcast,resultHandler);
      }
    }

  }

  public static class sendHealthcheck_args implements org.apache.thrift.TBase<sendHealthcheck_args, sendHealthcheck_args._Fields>, java.io.Serializable, Cloneable, Comparable<sendHealthcheck_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendHealthcheck_args");

    private static final org.apache.thrift.protocol.TField NUMBER_OF_CORES_FIELD_DESC = new org.apache.thrift.protocol.TField("numberOfCores", org.apache.thrift.protocol.TType.I16, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendHealthcheck_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendHealthcheck_argsTupleSchemeFactory());
    }

    public short numberOfCores; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NUMBER_OF_CORES((short)1, "numberOfCores");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NUMBER_OF_CORES
            return NUMBER_OF_CORES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NUMBEROFCORES_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NUMBER_OF_CORES, new org.apache.thrift.meta_data.FieldMetaData("numberOfCores", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendHealthcheck_args.class, metaDataMap);
    }

    public sendHealthcheck_args() {
    }

    public sendHealthcheck_args(
      short numberOfCores)
    {
      this();
      this.numberOfCores = numberOfCores;
      setNumberOfCoresIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendHealthcheck_args(sendHealthcheck_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.numberOfCores = other.numberOfCores;
    }

    public sendHealthcheck_args deepCopy() {
      return new sendHealthcheck_args(this);
    }

    @Override
    public void clear() {
      setNumberOfCoresIsSet(false);
      this.numberOfCores = 0;
    }

    public short getNumberOfCores() {
      return this.numberOfCores;
    }

    public sendHealthcheck_args setNumberOfCores(short numberOfCores) {
      this.numberOfCores = numberOfCores;
      setNumberOfCoresIsSet(true);
      return this;
    }

    public void unsetNumberOfCores() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMBEROFCORES_ISSET_ID);
    }

    /** Returns true if field numberOfCores is set (has been assigned a value) and false otherwise */
    public boolean isSetNumberOfCores() {
      return EncodingUtils.testBit(__isset_bitfield, __NUMBEROFCORES_ISSET_ID);
    }

    public void setNumberOfCoresIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMBEROFCORES_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NUMBER_OF_CORES:
        if (value == null) {
          unsetNumberOfCores();
        } else {
          setNumberOfCores((Short)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NUMBER_OF_CORES:
        return Short.valueOf(getNumberOfCores());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NUMBER_OF_CORES:
        return isSetNumberOfCores();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendHealthcheck_args)
        return this.equals((sendHealthcheck_args)that);
      return false;
    }

    public boolean equals(sendHealthcheck_args that) {
      if (that == null)
        return false;

      boolean this_present_numberOfCores = true;
      boolean that_present_numberOfCores = true;
      if (this_present_numberOfCores || that_present_numberOfCores) {
        if (!(this_present_numberOfCores && that_present_numberOfCores))
          return false;
        if (this.numberOfCores != that.numberOfCores)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_numberOfCores = true;
      list.add(present_numberOfCores);
      if (present_numberOfCores)
        list.add(numberOfCores);

      return list.hashCode();
    }

    @Override
    public int compareTo(sendHealthcheck_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetNumberOfCores()).compareTo(other.isSetNumberOfCores());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNumberOfCores()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numberOfCores, other.numberOfCores);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendHealthcheck_args(");
      boolean first = true;

      sb.append("numberOfCores:");
      sb.append(this.numberOfCores);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendHealthcheck_argsStandardSchemeFactory implements SchemeFactory {
      public sendHealthcheck_argsStandardScheme getScheme() {
        return new sendHealthcheck_argsStandardScheme();
      }
    }

    private static class sendHealthcheck_argsStandardScheme extends StandardScheme<sendHealthcheck_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendHealthcheck_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NUMBER_OF_CORES
              if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
                struct.numberOfCores = iprot.readI16();
                struct.setNumberOfCoresIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendHealthcheck_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NUMBER_OF_CORES_FIELD_DESC);
        oprot.writeI16(struct.numberOfCores);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendHealthcheck_argsTupleSchemeFactory implements SchemeFactory {
      public sendHealthcheck_argsTupleScheme getScheme() {
        return new sendHealthcheck_argsTupleScheme();
      }
    }

    private static class sendHealthcheck_argsTupleScheme extends TupleScheme<sendHealthcheck_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendHealthcheck_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNumberOfCores()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetNumberOfCores()) {
          oprot.writeI16(struct.numberOfCores);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendHealthcheck_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.numberOfCores = iprot.readI16();
          struct.setNumberOfCoresIsSet(true);
        }
      }
    }

  }

  public static class sendHealthcheck_result implements org.apache.thrift.TBase<sendHealthcheck_result, sendHealthcheck_result._Fields>, java.io.Serializable, Cloneable, Comparable<sendHealthcheck_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendHealthcheck_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendHealthcheck_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendHealthcheck_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendHealthcheck_result.class, metaDataMap);
    }

    public sendHealthcheck_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendHealthcheck_result(sendHealthcheck_result other) {
    }

    public sendHealthcheck_result deepCopy() {
      return new sendHealthcheck_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendHealthcheck_result)
        return this.equals((sendHealthcheck_result)that);
      return false;
    }

    public boolean equals(sendHealthcheck_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(sendHealthcheck_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendHealthcheck_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendHealthcheck_resultStandardSchemeFactory implements SchemeFactory {
      public sendHealthcheck_resultStandardScheme getScheme() {
        return new sendHealthcheck_resultStandardScheme();
      }
    }

    private static class sendHealthcheck_resultStandardScheme extends StandardScheme<sendHealthcheck_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendHealthcheck_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendHealthcheck_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendHealthcheck_resultTupleSchemeFactory implements SchemeFactory {
      public sendHealthcheck_resultTupleScheme getScheme() {
        return new sendHealthcheck_resultTupleScheme();
      }
    }

    private static class sendHealthcheck_resultTupleScheme extends TupleScheme<sendHealthcheck_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendHealthcheck_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendHealthcheck_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class sendServerUp_args implements org.apache.thrift.TBase<sendServerUp_args, sendServerUp_args._Fields>, java.io.Serializable, Cloneable, Comparable<sendServerUp_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendServerUp_args");

    private static final org.apache.thrift.protocol.TField PORT_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("portNumber", org.apache.thrift.protocol.TType.I16, (short)1);
    private static final org.apache.thrift.protocol.TField NUMBER_OF_CORES_FIELD_DESC = new org.apache.thrift.protocol.TField("numberOfCores", org.apache.thrift.protocol.TType.I16, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendServerUp_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendServerUp_argsTupleSchemeFactory());
    }

    public short portNumber; // required
    public short numberOfCores; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PORT_NUMBER((short)1, "portNumber"),
      NUMBER_OF_CORES((short)2, "numberOfCores");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PORT_NUMBER
            return PORT_NUMBER;
          case 2: // NUMBER_OF_CORES
            return NUMBER_OF_CORES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PORTNUMBER_ISSET_ID = 0;
    private static final int __NUMBEROFCORES_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PORT_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("portNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
      tmpMap.put(_Fields.NUMBER_OF_CORES, new org.apache.thrift.meta_data.FieldMetaData("numberOfCores", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendServerUp_args.class, metaDataMap);
    }

    public sendServerUp_args() {
    }

    public sendServerUp_args(
      short portNumber,
      short numberOfCores)
    {
      this();
      this.portNumber = portNumber;
      setPortNumberIsSet(true);
      this.numberOfCores = numberOfCores;
      setNumberOfCoresIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendServerUp_args(sendServerUp_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.portNumber = other.portNumber;
      this.numberOfCores = other.numberOfCores;
    }

    public sendServerUp_args deepCopy() {
      return new sendServerUp_args(this);
    }

    @Override
    public void clear() {
      setPortNumberIsSet(false);
      this.portNumber = 0;
      setNumberOfCoresIsSet(false);
      this.numberOfCores = 0;
    }

    public short getPortNumber() {
      return this.portNumber;
    }

    public sendServerUp_args setPortNumber(short portNumber) {
      this.portNumber = portNumber;
      setPortNumberIsSet(true);
      return this;
    }

    public void unsetPortNumber() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PORTNUMBER_ISSET_ID);
    }

    /** Returns true if field portNumber is set (has been assigned a value) and false otherwise */
    public boolean isSetPortNumber() {
      return EncodingUtils.testBit(__isset_bitfield, __PORTNUMBER_ISSET_ID);
    }

    public void setPortNumberIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PORTNUMBER_ISSET_ID, value);
    }

    public short getNumberOfCores() {
      return this.numberOfCores;
    }

    public sendServerUp_args setNumberOfCores(short numberOfCores) {
      this.numberOfCores = numberOfCores;
      setNumberOfCoresIsSet(true);
      return this;
    }

    public void unsetNumberOfCores() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMBEROFCORES_ISSET_ID);
    }

    /** Returns true if field numberOfCores is set (has been assigned a value) and false otherwise */
    public boolean isSetNumberOfCores() {
      return EncodingUtils.testBit(__isset_bitfield, __NUMBEROFCORES_ISSET_ID);
    }

    public void setNumberOfCoresIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMBEROFCORES_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PORT_NUMBER:
        if (value == null) {
          unsetPortNumber();
        } else {
          setPortNumber((Short)value);
        }
        break;

      case NUMBER_OF_CORES:
        if (value == null) {
          unsetNumberOfCores();
        } else {
          setNumberOfCores((Short)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PORT_NUMBER:
        return Short.valueOf(getPortNumber());

      case NUMBER_OF_CORES:
        return Short.valueOf(getNumberOfCores());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PORT_NUMBER:
        return isSetPortNumber();
      case NUMBER_OF_CORES:
        return isSetNumberOfCores();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendServerUp_args)
        return this.equals((sendServerUp_args)that);
      return false;
    }

    public boolean equals(sendServerUp_args that) {
      if (that == null)
        return false;

      boolean this_present_portNumber = true;
      boolean that_present_portNumber = true;
      if (this_present_portNumber || that_present_portNumber) {
        if (!(this_present_portNumber && that_present_portNumber))
          return false;
        if (this.portNumber != that.portNumber)
          return false;
      }

      boolean this_present_numberOfCores = true;
      boolean that_present_numberOfCores = true;
      if (this_present_numberOfCores || that_present_numberOfCores) {
        if (!(this_present_numberOfCores && that_present_numberOfCores))
          return false;
        if (this.numberOfCores != that.numberOfCores)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_portNumber = true;
      list.add(present_portNumber);
      if (present_portNumber)
        list.add(portNumber);

      boolean present_numberOfCores = true;
      list.add(present_numberOfCores);
      if (present_numberOfCores)
        list.add(numberOfCores);

      return list.hashCode();
    }

    @Override
    public int compareTo(sendServerUp_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPortNumber()).compareTo(other.isSetPortNumber());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPortNumber()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.portNumber, other.portNumber);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNumberOfCores()).compareTo(other.isSetNumberOfCores());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNumberOfCores()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numberOfCores, other.numberOfCores);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendServerUp_args(");
      boolean first = true;

      sb.append("portNumber:");
      sb.append(this.portNumber);
      first = false;
      if (!first) sb.append(", ");
      sb.append("numberOfCores:");
      sb.append(this.numberOfCores);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendServerUp_argsStandardSchemeFactory implements SchemeFactory {
      public sendServerUp_argsStandardScheme getScheme() {
        return new sendServerUp_argsStandardScheme();
      }
    }

    private static class sendServerUp_argsStandardScheme extends StandardScheme<sendServerUp_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendServerUp_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PORT_NUMBER
              if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
                struct.portNumber = iprot.readI16();
                struct.setPortNumberIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NUMBER_OF_CORES
              if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
                struct.numberOfCores = iprot.readI16();
                struct.setNumberOfCoresIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendServerUp_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PORT_NUMBER_FIELD_DESC);
        oprot.writeI16(struct.portNumber);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(NUMBER_OF_CORES_FIELD_DESC);
        oprot.writeI16(struct.numberOfCores);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendServerUp_argsTupleSchemeFactory implements SchemeFactory {
      public sendServerUp_argsTupleScheme getScheme() {
        return new sendServerUp_argsTupleScheme();
      }
    }

    private static class sendServerUp_argsTupleScheme extends TupleScheme<sendServerUp_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendServerUp_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPortNumber()) {
          optionals.set(0);
        }
        if (struct.isSetNumberOfCores()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPortNumber()) {
          oprot.writeI16(struct.portNumber);
        }
        if (struct.isSetNumberOfCores()) {
          oprot.writeI16(struct.numberOfCores);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendServerUp_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.portNumber = iprot.readI16();
          struct.setPortNumberIsSet(true);
        }
        if (incoming.get(1)) {
          struct.numberOfCores = iprot.readI16();
          struct.setNumberOfCoresIsSet(true);
        }
      }
    }

  }

  public static class sendServerUp_result implements org.apache.thrift.TBase<sendServerUp_result, sendServerUp_result._Fields>, java.io.Serializable, Cloneable, Comparable<sendServerUp_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendServerUp_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendServerUp_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendServerUp_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendServerUp_result.class, metaDataMap);
    }

    public sendServerUp_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendServerUp_result(sendServerUp_result other) {
    }

    public sendServerUp_result deepCopy() {
      return new sendServerUp_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendServerUp_result)
        return this.equals((sendServerUp_result)that);
      return false;
    }

    public boolean equals(sendServerUp_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(sendServerUp_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendServerUp_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendServerUp_resultStandardSchemeFactory implements SchemeFactory {
      public sendServerUp_resultStandardScheme getScheme() {
        return new sendServerUp_resultStandardScheme();
      }
    }

    private static class sendServerUp_resultStandardScheme extends StandardScheme<sendServerUp_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendServerUp_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendServerUp_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendServerUp_resultTupleSchemeFactory implements SchemeFactory {
      public sendServerUp_resultTupleScheme getScheme() {
        return new sendServerUp_resultTupleScheme();
      }
    }

    private static class sendServerUp_resultTupleScheme extends TupleScheme<sendServerUp_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendServerUp_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendServerUp_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class receiveHealthCheck_args implements org.apache.thrift.TBase<receiveHealthCheck_args, receiveHealthCheck_args._Fields>, java.io.Serializable, Cloneable, Comparable<receiveHealthCheck_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("receiveHealthCheck_args");

    private static final org.apache.thrift.protocol.TField HEALTH_CHECK_FIELD_DESC = new org.apache.thrift.protocol.TField("healthCheck", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new receiveHealthCheck_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new receiveHealthCheck_argsTupleSchemeFactory());
    }

    public ServerHealthcheck healthCheck; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HEALTH_CHECK((short)1, "healthCheck");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HEALTH_CHECK
            return HEALTH_CHECK;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HEALTH_CHECK, new org.apache.thrift.meta_data.FieldMetaData("healthCheck", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ServerHealthcheck.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(receiveHealthCheck_args.class, metaDataMap);
    }

    public receiveHealthCheck_args() {
    }

    public receiveHealthCheck_args(
      ServerHealthcheck healthCheck)
    {
      this();
      this.healthCheck = healthCheck;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public receiveHealthCheck_args(receiveHealthCheck_args other) {
      if (other.isSetHealthCheck()) {
        this.healthCheck = new ServerHealthcheck(other.healthCheck);
      }
    }

    public receiveHealthCheck_args deepCopy() {
      return new receiveHealthCheck_args(this);
    }

    @Override
    public void clear() {
      this.healthCheck = null;
    }

    public ServerHealthcheck getHealthCheck() {
      return this.healthCheck;
    }

    public receiveHealthCheck_args setHealthCheck(ServerHealthcheck healthCheck) {
      this.healthCheck = healthCheck;
      return this;
    }

    public void unsetHealthCheck() {
      this.healthCheck = null;
    }

    /** Returns true if field healthCheck is set (has been assigned a value) and false otherwise */
    public boolean isSetHealthCheck() {
      return this.healthCheck != null;
    }

    public void setHealthCheckIsSet(boolean value) {
      if (!value) {
        this.healthCheck = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HEALTH_CHECK:
        if (value == null) {
          unsetHealthCheck();
        } else {
          setHealthCheck((ServerHealthcheck)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HEALTH_CHECK:
        return getHealthCheck();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HEALTH_CHECK:
        return isSetHealthCheck();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof receiveHealthCheck_args)
        return this.equals((receiveHealthCheck_args)that);
      return false;
    }

    public boolean equals(receiveHealthCheck_args that) {
      if (that == null)
        return false;

      boolean this_present_healthCheck = true && this.isSetHealthCheck();
      boolean that_present_healthCheck = true && that.isSetHealthCheck();
      if (this_present_healthCheck || that_present_healthCheck) {
        if (!(this_present_healthCheck && that_present_healthCheck))
          return false;
        if (!this.healthCheck.equals(that.healthCheck))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_healthCheck = true && (isSetHealthCheck());
      list.add(present_healthCheck);
      if (present_healthCheck)
        list.add(healthCheck);

      return list.hashCode();
    }

    @Override
    public int compareTo(receiveHealthCheck_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetHealthCheck()).compareTo(other.isSetHealthCheck());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHealthCheck()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.healthCheck, other.healthCheck);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("receiveHealthCheck_args(");
      boolean first = true;

      sb.append("healthCheck:");
      if (this.healthCheck == null) {
        sb.append("null");
      } else {
        sb.append(this.healthCheck);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (healthCheck != null) {
        healthCheck.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class receiveHealthCheck_argsStandardSchemeFactory implements SchemeFactory {
      public receiveHealthCheck_argsStandardScheme getScheme() {
        return new receiveHealthCheck_argsStandardScheme();
      }
    }

    private static class receiveHealthCheck_argsStandardScheme extends StandardScheme<receiveHealthCheck_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, receiveHealthCheck_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HEALTH_CHECK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.healthCheck = new ServerHealthcheck();
                struct.healthCheck.read(iprot);
                struct.setHealthCheckIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, receiveHealthCheck_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.healthCheck != null) {
          oprot.writeFieldBegin(HEALTH_CHECK_FIELD_DESC);
          struct.healthCheck.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class receiveHealthCheck_argsTupleSchemeFactory implements SchemeFactory {
      public receiveHealthCheck_argsTupleScheme getScheme() {
        return new receiveHealthCheck_argsTupleScheme();
      }
    }

    private static class receiveHealthCheck_argsTupleScheme extends TupleScheme<receiveHealthCheck_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, receiveHealthCheck_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetHealthCheck()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetHealthCheck()) {
          struct.healthCheck.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, receiveHealthCheck_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.healthCheck = new ServerHealthcheck();
          struct.healthCheck.read(iprot);
          struct.setHealthCheckIsSet(true);
        }
      }
    }

  }

  public static class receiveHealthCheck_result implements org.apache.thrift.TBase<receiveHealthCheck_result, receiveHealthCheck_result._Fields>, java.io.Serializable, Cloneable, Comparable<receiveHealthCheck_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("receiveHealthCheck_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new receiveHealthCheck_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new receiveHealthCheck_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(receiveHealthCheck_result.class, metaDataMap);
    }

    public receiveHealthCheck_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public receiveHealthCheck_result(receiveHealthCheck_result other) {
    }

    public receiveHealthCheck_result deepCopy() {
      return new receiveHealthCheck_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof receiveHealthCheck_result)
        return this.equals((receiveHealthCheck_result)that);
      return false;
    }

    public boolean equals(receiveHealthCheck_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(receiveHealthCheck_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("receiveHealthCheck_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class receiveHealthCheck_resultStandardSchemeFactory implements SchemeFactory {
      public receiveHealthCheck_resultStandardScheme getScheme() {
        return new receiveHealthCheck_resultStandardScheme();
      }
    }

    private static class receiveHealthCheck_resultStandardScheme extends StandardScheme<receiveHealthCheck_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, receiveHealthCheck_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, receiveHealthCheck_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class receiveHealthCheck_resultTupleSchemeFactory implements SchemeFactory {
      public receiveHealthCheck_resultTupleScheme getScheme() {
        return new receiveHealthCheck_resultTupleScheme();
      }
    }

    private static class receiveHealthCheck_resultTupleScheme extends TupleScheme<receiveHealthCheck_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, receiveHealthCheck_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, receiveHealthCheck_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class receiveServerUp_args implements org.apache.thrift.TBase<receiveServerUp_args, receiveServerUp_args._Fields>, java.io.Serializable, Cloneable, Comparable<receiveServerUp_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("receiveServerUp_args");

    private static final org.apache.thrift.protocol.TField BROADCAST_FIELD_DESC = new org.apache.thrift.protocol.TField("broadcast", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new receiveServerUp_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new receiveServerUp_argsTupleSchemeFactory());
    }

    public ServerUpBroadcast broadcast; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BROADCAST((short)1, "broadcast");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BROADCAST
            return BROADCAST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BROADCAST, new org.apache.thrift.meta_data.FieldMetaData("broadcast", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ServerUpBroadcast.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(receiveServerUp_args.class, metaDataMap);
    }

    public receiveServerUp_args() {
    }

    public receiveServerUp_args(
      ServerUpBroadcast broadcast)
    {
      this();
      this.broadcast = broadcast;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public receiveServerUp_args(receiveServerUp_args other) {
      if (other.isSetBroadcast()) {
        this.broadcast = new ServerUpBroadcast(other.broadcast);
      }
    }

    public receiveServerUp_args deepCopy() {
      return new receiveServerUp_args(this);
    }

    @Override
    public void clear() {
      this.broadcast = null;
    }

    public ServerUpBroadcast getBroadcast() {
      return this.broadcast;
    }

    public receiveServerUp_args setBroadcast(ServerUpBroadcast broadcast) {
      this.broadcast = broadcast;
      return this;
    }

    public void unsetBroadcast() {
      this.broadcast = null;
    }

    /** Returns true if field broadcast is set (has been assigned a value) and false otherwise */
    public boolean isSetBroadcast() {
      return this.broadcast != null;
    }

    public void setBroadcastIsSet(boolean value) {
      if (!value) {
        this.broadcast = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BROADCAST:
        if (value == null) {
          unsetBroadcast();
        } else {
          setBroadcast((ServerUpBroadcast)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BROADCAST:
        return getBroadcast();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BROADCAST:
        return isSetBroadcast();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof receiveServerUp_args)
        return this.equals((receiveServerUp_args)that);
      return false;
    }

    public boolean equals(receiveServerUp_args that) {
      if (that == null)
        return false;

      boolean this_present_broadcast = true && this.isSetBroadcast();
      boolean that_present_broadcast = true && that.isSetBroadcast();
      if (this_present_broadcast || that_present_broadcast) {
        if (!(this_present_broadcast && that_present_broadcast))
          return false;
        if (!this.broadcast.equals(that.broadcast))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_broadcast = true && (isSetBroadcast());
      list.add(present_broadcast);
      if (present_broadcast)
        list.add(broadcast);

      return list.hashCode();
    }

    @Override
    public int compareTo(receiveServerUp_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBroadcast()).compareTo(other.isSetBroadcast());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBroadcast()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.broadcast, other.broadcast);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("receiveServerUp_args(");
      boolean first = true;

      sb.append("broadcast:");
      if (this.broadcast == null) {
        sb.append("null");
      } else {
        sb.append(this.broadcast);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (broadcast != null) {
        broadcast.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class receiveServerUp_argsStandardSchemeFactory implements SchemeFactory {
      public receiveServerUp_argsStandardScheme getScheme() {
        return new receiveServerUp_argsStandardScheme();
      }
    }

    private static class receiveServerUp_argsStandardScheme extends StandardScheme<receiveServerUp_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, receiveServerUp_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BROADCAST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.broadcast = new ServerUpBroadcast();
                struct.broadcast.read(iprot);
                struct.setBroadcastIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, receiveServerUp_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.broadcast != null) {
          oprot.writeFieldBegin(BROADCAST_FIELD_DESC);
          struct.broadcast.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class receiveServerUp_argsTupleSchemeFactory implements SchemeFactory {
      public receiveServerUp_argsTupleScheme getScheme() {
        return new receiveServerUp_argsTupleScheme();
      }
    }

    private static class receiveServerUp_argsTupleScheme extends TupleScheme<receiveServerUp_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, receiveServerUp_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBroadcast()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBroadcast()) {
          struct.broadcast.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, receiveServerUp_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.broadcast = new ServerUpBroadcast();
          struct.broadcast.read(iprot);
          struct.setBroadcastIsSet(true);
        }
      }
    }

  }

  public static class receiveServerUp_result implements org.apache.thrift.TBase<receiveServerUp_result, receiveServerUp_result._Fields>, java.io.Serializable, Cloneable, Comparable<receiveServerUp_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("receiveServerUp_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new receiveServerUp_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new receiveServerUp_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(receiveServerUp_result.class, metaDataMap);
    }

    public receiveServerUp_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public receiveServerUp_result(receiveServerUp_result other) {
    }

    public receiveServerUp_result deepCopy() {
      return new receiveServerUp_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof receiveServerUp_result)
        return this.equals((receiveServerUp_result)that);
      return false;
    }

    public boolean equals(receiveServerUp_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(receiveServerUp_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("receiveServerUp_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class receiveServerUp_resultStandardSchemeFactory implements SchemeFactory {
      public receiveServerUp_resultStandardScheme getScheme() {
        return new receiveServerUp_resultStandardScheme();
      }
    }

    private static class receiveServerUp_resultStandardScheme extends StandardScheme<receiveServerUp_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, receiveServerUp_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, receiveServerUp_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class receiveServerUp_resultTupleSchemeFactory implements SchemeFactory {
      public receiveServerUp_resultTupleScheme getScheme() {
        return new receiveServerUp_resultTupleScheme();
      }
    }

    private static class receiveServerUp_resultTupleScheme extends TupleScheme<receiveServerUp_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, receiveServerUp_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, receiveServerUp_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

}
